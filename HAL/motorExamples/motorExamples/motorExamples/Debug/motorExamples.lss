
motorExamples.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000061f  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028c  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000317  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
   SET_BIT(DDRC, 0);
  6c:	84 b3       	in	r24, 0x14	; 20
   SET_BIT(DDRC, 1);
   SET_BIT(DDRC, 2);
   SET_BIT(DDRC, 3);
   SET_BIT(DDRC, 4);
   SET_BIT(DDRC, 5);
  6e:	8f 63       	ori	r24, 0x3F	; 63
  70:	84 bb       	out	0x14, r24	; 20
   
   SET_BIT(PORTC, 5);
  72:	85 b3       	in	r24, 0x15	; 21
  74:	80 62       	ori	r24, 0x20	; 32
  76:	85 bb       	out	0x15, r24	; 21
   
   while (1)
   {
	   SET_BIT(PORTC, 0);
  78:	85 b3       	in	r24, 0x15	; 21
	   SET_BIT(PORTC, 1);
	   SET_BIT(PORTC, 2);
  7a:	87 60       	ori	r24, 0x07	; 7
	   CLR_BIT(PORTC, 4);
  7c:	8f 7e       	andi	r24, 0xEF	; 239
	   SET_BIT(PORTC, 3);
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	81 e1       	ldi	r24, 0x11	; 17
  86:	9a e7       	ldi	r25, 0x7A	; 122
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
	   _delay_ms(5000);
	   CLR_BIT(PORTC, 0);
  94:	85 b3       	in	r24, 0x15	; 21
	   CLR_BIT(PORTC, 1);
	   CLR_BIT(PORTC, 2);
	   CLR_BIT(PORTC, 3);
  96:	80 7f       	andi	r24, 0xF0	; 240
	   SET_BIT(PORTC, 4);
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	81 e1       	ldi	r24, 0x11	; 17
  a0:	9a e7       	ldi	r25, 0x7A	; 122
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
  ae:	e4 cf       	rjmp	.-56     	; 0x78 <main+0xc>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>


atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000053a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c29  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000793  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c5  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004df  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005fe  00000000  00000000  000025d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002bd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define	RED	2
#define LED_PORT	PC

int main()
{
	DIO_Init ();
  82:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_Init>
	
	DIO_WritePin(RED, HIGH);
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	82 e0       	ldi	r24, 0x02	; 2
  8a:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_WritePin>
	
	
	if (DIO_ReadPin(3))
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 44 02 	call	0x488	; 0x488 <DIO_ReadPin>
  94:	88 23       	and	r24, r24
  96:	81 f0       	breq	.+32     	; 0xb8 <main+0x36>
	{
		DIO_WritePin( 5, HIGH);
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	85 e0       	ldi	r24, 0x05	; 5
  9c:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	89 e6       	ldi	r24, 0x69	; 105
  a4:	98 e1       	ldi	r25, 0x18	; 24
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x24>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x2e>
  b0:	00 00       	nop
		_delay_ms(1000);
		DIO_TogglePin(PINA5);
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	0e 94 03 02 	call	0x406	; 0x406 <DIO_TogglePin>
	}
	
	DIO_WritePORT(PD, 0b10101010);
  b8:	6a ea       	ldi	r22, 0xAA	; 170
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_WritePORT>
	
	unsigned char value = DIO_ReadPORT(PD);
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 8a 02 	call	0x514	; 0x514 <DIO_ReadPORT>
	DIO_WritePORT(PC,value);
  c6:	68 2f       	mov	r22, r24
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <DIO_WritePORT>
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	08 95       	ret

000000d4 <DIO_InitPin>:



static void DIO_InitPin( DIO_pin_type pin, DIO_PinStatus_type status)
{
	if ( status == OUTPUT )
  d4:	61 11       	cpse	r22, r1
  d6:	52 c0       	rjmp	.+164    	; 0x17c <DIO_InitPin+0xa8>
	{
		if ( pin >= PINA0 && pin <= PINA7 )
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	90 f4       	brcc	.+36     	; 0x100 <DIO_InitPin+0x2c>
		{
			SET_BIT(DDRA, pin);
  dc:	4a b3       	in	r20, 0x1a	; 26
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_InitPin+0x16>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_InitPin+0x12>
  ee:	cb 01       	movw	r24, r22
  f0:	94 2f       	mov	r25, r20
  f2:	98 2b       	or	r25, r24
  f4:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA, pin);
  f6:	9b b3       	in	r25, 0x1b	; 27
  f8:	80 95       	com	r24
  fa:	89 23       	and	r24, r25
  fc:	8b bb       	out	0x1b, r24	; 27
  fe:	08 95       	ret
		}
		else if ( pin >= PINB0 && pin <= PINB7 )
 100:	28 ef       	ldi	r18, 0xF8	; 248
 102:	28 0f       	add	r18, r24
 104:	28 30       	cpi	r18, 0x08	; 8
 106:	80 f4       	brcc	.+32     	; 0x128 <DIO_InitPin+0x54>
		{
			pin = pin - PINB0;
			SET_BIT(DDRB, pin);
 108:	37 b3       	in	r19, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_InitPin+0x40>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	2a 95       	dec	r18
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_InitPin+0x3c>
 118:	93 2f       	mov	r25, r19
 11a:	98 2b       	or	r25, r24
 11c:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB, pin);
 11e:	98 b3       	in	r25, 0x18	; 24
 120:	80 95       	com	r24
 122:	89 23       	and	r24, r25
 124:	88 bb       	out	0x18, r24	; 24
 126:	08 95       	ret
		}
		else if ( pin >= PINC0 && pin <= PINC7 )
 128:	20 ef       	ldi	r18, 0xF0	; 240
 12a:	28 0f       	add	r18, r24
 12c:	28 30       	cpi	r18, 0x08	; 8
 12e:	80 f4       	brcc	.+32     	; 0x150 <DIO_InitPin+0x7c>
		{
			pin = pin - PINC0;
			SET_BIT(DDRC, pin);
 130:	34 b3       	in	r19, 0x14	; 20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_InitPin+0x68>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	2a 95       	dec	r18
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_InitPin+0x64>
 140:	93 2f       	mov	r25, r19
 142:	98 2b       	or	r25, r24
 144:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC, pin);
 146:	95 b3       	in	r25, 0x15	; 21
 148:	80 95       	com	r24
 14a:	89 23       	and	r24, r25
 14c:	85 bb       	out	0x15, r24	; 21
 14e:	08 95       	ret
		}
		else if ( pin >= PIND0 && pin <= PIND7 )
 150:	88 51       	subi	r24, 0x18	; 24
 152:	88 30       	cpi	r24, 0x08	; 8
 154:	08 f0       	brcs	.+2      	; 0x158 <DIO_InitPin+0x84>
 156:	ba c0       	rjmp	.+372    	; 0x2cc <DIO_InitPin+0x1f8>
		{
			pin = pin - PIND0;
			SET_BIT(DDRD, pin);
 158:	41 b3       	in	r20, 0x11	; 17
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_InitPin+0x92>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_InitPin+0x8e>
 16a:	cb 01       	movw	r24, r22
 16c:	94 2f       	mov	r25, r20
 16e:	98 2b       	or	r25, r24
 170:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD, pin);
 172:	92 b3       	in	r25, 0x12	; 18
 174:	80 95       	com	r24
 176:	89 23       	and	r24, r25
 178:	82 bb       	out	0x12, r24	; 18
 17a:	08 95       	ret
		}
	}
	else if ( status == INFREE )
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	09 f0       	breq	.+2      	; 0x182 <DIO_InitPin+0xae>
 180:	52 c0       	rjmp	.+164    	; 0x226 <DIO_InitPin+0x152>
	{
		if ( pin >= PINA0 && pin <= PINA7 )
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	90 f4       	brcc	.+36     	; 0x1aa <DIO_InitPin+0xd6>
		{
			CLR_BIT(DDRA, pin);
 186:	4a b3       	in	r20, 0x1a	; 26
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	b9 01       	movw	r22, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_InitPin+0xc0>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	8a 95       	dec	r24
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_InitPin+0xbc>
 198:	cb 01       	movw	r24, r22
 19a:	80 95       	com	r24
 19c:	94 2f       	mov	r25, r20
 19e:	98 23       	and	r25, r24
 1a0:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA, pin);
 1a2:	9b b3       	in	r25, 0x1b	; 27
 1a4:	89 23       	and	r24, r25
 1a6:	8b bb       	out	0x1b, r24	; 27
 1a8:	08 95       	ret
		}
		else if ( pin >= PINB0 && pin <= PINB7 )
 1aa:	28 ef       	ldi	r18, 0xF8	; 248
 1ac:	28 0f       	add	r18, r24
 1ae:	28 30       	cpi	r18, 0x08	; 8
 1b0:	80 f4       	brcc	.+32     	; 0x1d2 <DIO_InitPin+0xfe>
		{
			pin = pin - PINB0;
			CLR_BIT(DDRB, pin);
 1b2:	37 b3       	in	r19, 0x17	; 23
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_InitPin+0xea>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	2a 95       	dec	r18
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_InitPin+0xe6>
 1c2:	80 95       	com	r24
 1c4:	93 2f       	mov	r25, r19
 1c6:	98 23       	and	r25, r24
 1c8:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB, pin);
 1ca:	98 b3       	in	r25, 0x18	; 24
 1cc:	89 23       	and	r24, r25
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	08 95       	ret
		}
		else if ( pin >= PINC0 && pin <= PINC7 )
 1d2:	20 ef       	ldi	r18, 0xF0	; 240
 1d4:	28 0f       	add	r18, r24
 1d6:	28 30       	cpi	r18, 0x08	; 8
 1d8:	80 f4       	brcc	.+32     	; 0x1fa <DIO_InitPin+0x126>
		{
			pin = pin - PINC0;
			CLR_BIT(DDRC, pin);
 1da:	34 b3       	in	r19, 0x14	; 20
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_InitPin+0x112>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	2a 95       	dec	r18
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_InitPin+0x10e>
 1ea:	80 95       	com	r24
 1ec:	93 2f       	mov	r25, r19
 1ee:	98 23       	and	r25, r24
 1f0:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC, pin);
 1f2:	95 b3       	in	r25, 0x15	; 21
 1f4:	89 23       	and	r24, r25
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
		}
		else if ( pin >= PIND0 && pin <= PIND7 )
 1fa:	88 51       	subi	r24, 0x18	; 24
 1fc:	88 30       	cpi	r24, 0x08	; 8
 1fe:	08 f0       	brcs	.+2      	; 0x202 <DIO_InitPin+0x12e>
 200:	65 c0       	rjmp	.+202    	; 0x2cc <DIO_InitPin+0x1f8>
		{
			pin = pin - PIND0;
			CLR_BIT(DDRD, pin);
 202:	41 b3       	in	r20, 0x11	; 17
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_InitPin+0x13c>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_InitPin+0x138>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	94 2f       	mov	r25, r20
 21a:	98 23       	and	r25, r24
 21c:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD, pin);
 21e:	92 b3       	in	r25, 0x12	; 18
 220:	89 23       	and	r24, r25
 222:	82 bb       	out	0x12, r24	; 18
 224:	08 95       	ret
		}
	}
	else if ( status == INPULL )
 226:	62 30       	cpi	r22, 0x02	; 2
 228:	09 f0       	breq	.+2      	; 0x22c <DIO_InitPin+0x158>
 22a:	50 c0       	rjmp	.+160    	; 0x2cc <DIO_InitPin+0x1f8>
	{
		if ( pin >= PINA0 && pin <= PINA7 )
 22c:	88 30       	cpi	r24, 0x08	; 8
 22e:	90 f4       	brcc	.+36     	; 0x254 <DIO_InitPin+0x180>
		{
			CLR_BIT(DDRA, pin);
 230:	4a b3       	in	r20, 0x1a	; 26
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_InitPin+0x16a>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_InitPin+0x166>
 242:	cb 01       	movw	r24, r22
 244:	96 2f       	mov	r25, r22
 246:	90 95       	com	r25
 248:	94 23       	and	r25, r20
 24a:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA, pin);
 24c:	9b b3       	in	r25, 0x1b	; 27
 24e:	89 2b       	or	r24, r25
 250:	8b bb       	out	0x1b, r24	; 27
 252:	08 95       	ret
		}
		else if ( pin >= PINB0 && pin <= PINB7 )
 254:	28 ef       	ldi	r18, 0xF8	; 248
 256:	28 0f       	add	r18, r24
 258:	28 30       	cpi	r18, 0x08	; 8
 25a:	80 f4       	brcc	.+32     	; 0x27c <DIO_InitPin+0x1a8>
		{
			pin = pin - PINB0;
			CLR_BIT(DDRB, pin);
 25c:	37 b3       	in	r19, 0x17	; 23
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_InitPin+0x194>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_InitPin+0x190>
 26c:	98 2f       	mov	r25, r24
 26e:	90 95       	com	r25
 270:	93 23       	and	r25, r19
 272:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB, pin);
 274:	98 b3       	in	r25, 0x18	; 24
 276:	89 2b       	or	r24, r25
 278:	88 bb       	out	0x18, r24	; 24
 27a:	08 95       	ret
		}
		else if ( pin >= PINC0 && pin <= PINC7 )
 27c:	20 ef       	ldi	r18, 0xF0	; 240
 27e:	28 0f       	add	r18, r24
 280:	28 30       	cpi	r18, 0x08	; 8
 282:	80 f4       	brcc	.+32     	; 0x2a4 <DIO_InitPin+0x1d0>
		{
			pin = pin - PINC0;
			CLR_BIT(DDRC, pin);
 284:	34 b3       	in	r19, 0x14	; 20
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_InitPin+0x1bc>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	2a 95       	dec	r18
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_InitPin+0x1b8>
 294:	98 2f       	mov	r25, r24
 296:	90 95       	com	r25
 298:	93 23       	and	r25, r19
 29a:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC, pin);
 29c:	95 b3       	in	r25, 0x15	; 21
 29e:	89 2b       	or	r24, r25
 2a0:	85 bb       	out	0x15, r24	; 21
 2a2:	08 95       	ret
		}
		else if ( pin >= PIND0 && pin <= PIND7 )
 2a4:	88 51       	subi	r24, 0x18	; 24
 2a6:	88 30       	cpi	r24, 0x08	; 8
 2a8:	88 f4       	brcc	.+34     	; 0x2cc <DIO_InitPin+0x1f8>
		{
			pin = pin - PIND0;
			CLR_BIT(DDRD, pin);
 2aa:	41 b3       	in	r20, 0x11	; 17
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	b9 01       	movw	r22, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_InitPin+0x1e4>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	8a 95       	dec	r24
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_InitPin+0x1e0>
 2bc:	cb 01       	movw	r24, r22
 2be:	96 2f       	mov	r25, r22
 2c0:	90 95       	com	r25
 2c2:	94 23       	and	r25, r20
 2c4:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD, pin);
 2c6:	92 b3       	in	r25, 0x12	; 18
 2c8:	89 2b       	or	r24, r25
 2ca:	82 bb       	out	0x12, r24	; 18
 2cc:	08 95       	ret

000002ce <DIO_Init>:
		}
	}
}

extern void DIO_Init()
{
 2ce:	cf 93       	push	r28
	for (DIO_pin_type index = PINA0; index <= PIND7; index++)
 2d0:	c0 e0       	ldi	r28, 0x00	; 0
 2d2:	09 c0       	rjmp	.+18     	; 0x2e6 <DIO_Init+0x18>
	{
		DIO_InitPin(index, PinsStatusArray[index]);
 2d4:	ec 2f       	mov	r30, r28
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	e0 5a       	subi	r30, 0xA0	; 160
 2da:	ff 4f       	sbci	r31, 0xFF	; 255
 2dc:	60 81       	ld	r22, Z
 2de:	8c 2f       	mov	r24, r28
 2e0:	0e 94 6a 00 	call	0xd4	; 0xd4 <DIO_InitPin>
	}
}

extern void DIO_Init()
{
	for (DIO_pin_type index = PINA0; index <= PIND7; index++)
 2e4:	cf 5f       	subi	r28, 0xFF	; 255
 2e6:	c0 32       	cpi	r28, 0x20	; 32
 2e8:	a8 f3       	brcs	.-22     	; 0x2d4 <DIO_Init+0x6>
	{
		DIO_InitPin(index, PinsStatusArray[index]);
	}
}
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <DIO_WritePin>:

extern void DIO_WritePin(DIO_pin_type pin, DIO_pinVoltage_type volt)
{
	if ( volt == LOW )
 2ee:	61 11       	cpse	r22, r1
 2f0:	46 c0       	rjmp	.+140    	; 0x37e <DIO_WritePin+0x90>
	{
		if ( pin >= PINA0 && pin <= PINA7 )
 2f2:	88 30       	cpi	r24, 0x08	; 8
 2f4:	70 f4       	brcc	.+28     	; 0x312 <DIO_WritePin+0x24>
		{
			CLR_BIT(PORTA, pin);
 2f6:	4b b3       	in	r20, 0x1b	; 27
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_WritePin+0x16>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_WritePin+0x12>
 308:	cb 01       	movw	r24, r22
 30a:	80 95       	com	r24
 30c:	84 23       	and	r24, r20
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	08 95       	ret
		}
		else if ( pin >= PINB0 && pin <= PINB7 )
 312:	98 ef       	ldi	r25, 0xF8	; 248
 314:	98 0f       	add	r25, r24
 316:	98 30       	cpi	r25, 0x08	; 8
 318:	70 f4       	brcc	.+28     	; 0x336 <DIO_WritePin+0x48>
		{
			pin = pin - PINB0;

			CLR_BIT(PORTB, pin);
 31a:	48 b3       	in	r20, 0x18	; 24
 31c:	21 e0       	ldi	r18, 0x01	; 1
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	b9 01       	movw	r22, r18
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_WritePin+0x3a>
 324:	66 0f       	add	r22, r22
 326:	77 1f       	adc	r23, r23
 328:	9a 95       	dec	r25
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_WritePin+0x36>
 32c:	cb 01       	movw	r24, r22
 32e:	80 95       	com	r24
 330:	84 23       	and	r24, r20
 332:	88 bb       	out	0x18, r24	; 24
 334:	08 95       	ret
		}
		else if ( pin >= PINC0 && pin <= PINC7 )
 336:	90 ef       	ldi	r25, 0xF0	; 240
 338:	98 0f       	add	r25, r24
 33a:	98 30       	cpi	r25, 0x08	; 8
 33c:	70 f4       	brcc	.+28     	; 0x35a <DIO_WritePin+0x6c>
		{
			pin = pin - PINC0;

			CLR_BIT(PORTC, pin);
 33e:	45 b3       	in	r20, 0x15	; 21
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	b9 01       	movw	r22, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_WritePin+0x5e>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	9a 95       	dec	r25
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_WritePin+0x5a>
 350:	cb 01       	movw	r24, r22
 352:	80 95       	com	r24
 354:	84 23       	and	r24, r20
 356:	85 bb       	out	0x15, r24	; 21
 358:	08 95       	ret
		}
		else if ( pin >= PIND0 && pin <= PIND7 )
 35a:	88 51       	subi	r24, 0x18	; 24
 35c:	88 30       	cpi	r24, 0x08	; 8
 35e:	08 f0       	brcs	.+2      	; 0x362 <DIO_WritePin+0x74>
 360:	51 c0       	rjmp	.+162    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			pin = pin - PIND0;

			CLR_BIT(PORTD, pin);
 362:	42 b3       	in	r20, 0x12	; 18
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	b9 01       	movw	r22, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_WritePin+0x82>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	8a 95       	dec	r24
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_WritePin+0x7e>
 374:	cb 01       	movw	r24, r22
 376:	80 95       	com	r24
 378:	84 23       	and	r24, r20
 37a:	82 bb       	out	0x12, r24	; 18
 37c:	08 95       	ret
		}
	}
	else if ( volt == HIGH )
 37e:	61 30       	cpi	r22, 0x01	; 1
 380:	09 f0       	breq	.+2      	; 0x384 <DIO_WritePin+0x96>
 382:	40 c0       	rjmp	.+128    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		if ( pin >= PINA0 && pin <= PINA7 )
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	68 f4       	brcc	.+26     	; 0x3a2 <DIO_WritePin+0xb4>
		{
			SET_BIT(PORTA, pin);
 388:	4b b3       	in	r20, 0x1b	; 27
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	b9 01       	movw	r22, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_WritePin+0xa8>
 392:	66 0f       	add	r22, r22
 394:	77 1f       	adc	r23, r23
 396:	8a 95       	dec	r24
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_WritePin+0xa4>
 39a:	cb 01       	movw	r24, r22
 39c:	84 2b       	or	r24, r20
 39e:	8b bb       	out	0x1b, r24	; 27
 3a0:	08 95       	ret
		}
		else if ( pin >= PINB0 && pin <= PINB7 )
 3a2:	98 ef       	ldi	r25, 0xF8	; 248
 3a4:	98 0f       	add	r25, r24
 3a6:	98 30       	cpi	r25, 0x08	; 8
 3a8:	68 f4       	brcc	.+26     	; 0x3c4 <DIO_WritePin+0xd6>
		{
			pin = pin - PINB0;

			SET_BIT(PORTB, pin);
 3aa:	48 b3       	in	r20, 0x18	; 24
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_WritePin+0xca>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	9a 95       	dec	r25
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_WritePin+0xc6>
 3bc:	cb 01       	movw	r24, r22
 3be:	84 2b       	or	r24, r20
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	08 95       	ret
		}
		else if ( pin >= PINC0 && pin <= PINC7 )
 3c4:	90 ef       	ldi	r25, 0xF0	; 240
 3c6:	98 0f       	add	r25, r24
 3c8:	98 30       	cpi	r25, 0x08	; 8
 3ca:	68 f4       	brcc	.+26     	; 0x3e6 <DIO_WritePin+0xf8>
		{
			pin = pin - PINC0;

			SET_BIT(PORTC, pin);
 3cc:	45 b3       	in	r20, 0x15	; 21
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_WritePin+0xec>
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	9a 95       	dec	r25
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_WritePin+0xe8>
 3de:	cb 01       	movw	r24, r22
 3e0:	84 2b       	or	r24, r20
 3e2:	85 bb       	out	0x15, r24	; 21
 3e4:	08 95       	ret
		}
		else if ( pin >= PIND0 && pin <= PIND7 )
 3e6:	88 51       	subi	r24, 0x18	; 24
 3e8:	88 30       	cpi	r24, 0x08	; 8
 3ea:	60 f4       	brcc	.+24     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			pin = pin - PIND0;

			SET_BIT(PORTD, pin);
 3ec:	42 b3       	in	r20, 0x12	; 18
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	b9 01       	movw	r22, r18
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_WritePin+0x10c>
 3f6:	66 0f       	add	r22, r22
 3f8:	77 1f       	adc	r23, r23
 3fa:	8a 95       	dec	r24
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_WritePin+0x108>
 3fe:	cb 01       	movw	r24, r22
 400:	84 2b       	or	r24, r20
 402:	82 bb       	out	0x12, r24	; 18
 404:	08 95       	ret

00000406 <DIO_TogglePin>:
	}
}

void DIO_TogglePin(DIO_pin_type pin)
{
	if ( pin >= PINA0 && pin <= PINA7 )
 406:	88 30       	cpi	r24, 0x08	; 8
 408:	68 f4       	brcc	.+26     	; 0x424 <DIO_TogglePin+0x1e>
	{
		TOG_BIT(PORTA, pin);
 40a:	4b b3       	in	r20, 0x1b	; 27
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	b9 01       	movw	r22, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_TogglePin+0x12>
 414:	66 0f       	add	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_TogglePin+0xe>
 41c:	cb 01       	movw	r24, r22
 41e:	84 27       	eor	r24, r20
 420:	8b bb       	out	0x1b, r24	; 27
 422:	08 95       	ret
	}
	else if ( pin >= PINB0 && pin <= PINB7 )
 424:	98 ef       	ldi	r25, 0xF8	; 248
 426:	98 0f       	add	r25, r24
 428:	98 30       	cpi	r25, 0x08	; 8
 42a:	68 f4       	brcc	.+26     	; 0x446 <DIO_TogglePin+0x40>
	{
		pin = pin - PINB0;

		TOG_BIT(PORTB, pin);
 42c:	48 b3       	in	r20, 0x18	; 24
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	b9 01       	movw	r22, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_TogglePin+0x34>
 436:	66 0f       	add	r22, r22
 438:	77 1f       	adc	r23, r23
 43a:	9a 95       	dec	r25
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_TogglePin+0x30>
 43e:	cb 01       	movw	r24, r22
 440:	84 27       	eor	r24, r20
 442:	88 bb       	out	0x18, r24	; 24
 444:	08 95       	ret
	}
	else if ( pin >= PINC0 && pin <= PINC7 )
 446:	90 ef       	ldi	r25, 0xF0	; 240
 448:	98 0f       	add	r25, r24
 44a:	98 30       	cpi	r25, 0x08	; 8
 44c:	68 f4       	brcc	.+26     	; 0x468 <DIO_TogglePin+0x62>
	{
		pin = pin - PINC0;

		TOG_BIT(PORTC, pin);
 44e:	45 b3       	in	r20, 0x15	; 21
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	b9 01       	movw	r22, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_TogglePin+0x56>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	9a 95       	dec	r25
 45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_TogglePin+0x52>
 460:	cb 01       	movw	r24, r22
 462:	84 27       	eor	r24, r20
 464:	85 bb       	out	0x15, r24	; 21
 466:	08 95       	ret
	}
	else if ( pin >= PIND0 && pin <= PIND7 )
 468:	88 51       	subi	r24, 0x18	; 24
 46a:	88 30       	cpi	r24, 0x08	; 8
 46c:	60 f4       	brcc	.+24     	; 0x486 <DIO_TogglePin+0x80>
	{
		pin = pin - PIND0;

		TOG_BIT(PORTD, pin);
 46e:	42 b3       	in	r20, 0x12	; 18
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	b9 01       	movw	r22, r18
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_TogglePin+0x76>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	8a 95       	dec	r24
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_TogglePin+0x72>
 480:	cb 01       	movw	r24, r22
 482:	84 27       	eor	r24, r20
 484:	82 bb       	out	0x12, r24	; 18
 486:	08 95       	ret

00000488 <DIO_ReadPin>:
	}
}

extern DIO_pinVoltage_type DIO_ReadPin(DIO_pin_type pin)
{
	if ( pin >= PINA0 && pin <= PINA7 )
 488:	88 30       	cpi	r24, 0x08	; 8
 48a:	58 f4       	brcc	.+22     	; 0x4a2 <DIO_ReadPin+0x1a>
	{
		return READ_BIT(PORTA, pin);
 48c:	2b b3       	in	r18, 0x1b	; 27
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	a9 01       	movw	r20, r18
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_ReadPin+0x10>
 494:	55 95       	asr	r21
 496:	47 95       	ror	r20
 498:	8a 95       	dec	r24
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_ReadPin+0xc>
 49c:	ca 01       	movw	r24, r20
 49e:	81 70       	andi	r24, 0x01	; 1
 4a0:	08 95       	ret
	}
	else if ( pin >= PINB0 && pin <= PINB7 )
 4a2:	28 ef       	ldi	r18, 0xF8	; 248
 4a4:	28 0f       	add	r18, r24
 4a6:	28 30       	cpi	r18, 0x08	; 8
 4a8:	48 f4       	brcc	.+18     	; 0x4bc <DIO_ReadPin+0x34>
	{
		pin = pin - PINB0;

		return READ_BIT(PORTB, pin);
 4aa:	88 b3       	in	r24, 0x18	; 24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_ReadPin+0x2c>
 4b0:	95 95       	asr	r25
 4b2:	87 95       	ror	r24
 4b4:	2a 95       	dec	r18
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_ReadPin+0x28>
 4b8:	81 70       	andi	r24, 0x01	; 1
 4ba:	08 95       	ret
	}
	else if ( pin >= PINC0 && pin <= PINC7 )
 4bc:	20 ef       	ldi	r18, 0xF0	; 240
 4be:	28 0f       	add	r18, r24
 4c0:	28 30       	cpi	r18, 0x08	; 8
 4c2:	48 f4       	brcc	.+18     	; 0x4d6 <DIO_ReadPin+0x4e>
	{
		pin = pin - PINC0;

		return READ_BIT(PORTC, pin);
 4c4:	85 b3       	in	r24, 0x15	; 21
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_ReadPin+0x46>
 4ca:	95 95       	asr	r25
 4cc:	87 95       	ror	r24
 4ce:	2a 95       	dec	r18
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_ReadPin+0x42>
 4d2:	81 70       	andi	r24, 0x01	; 1
 4d4:	08 95       	ret
	}
	else if ( pin >= PIND0 && pin <= PIND7 )
 4d6:	28 ee       	ldi	r18, 0xE8	; 232
 4d8:	28 0f       	add	r18, r24
 4da:	28 30       	cpi	r18, 0x08	; 8
 4dc:	50 f4       	brcc	.+20     	; 0x4f2 <DIO_ReadPin+0x6a>
	{
		pin = pin - PIND0;

		return READ_BIT(PORTD, pin);
 4de:	92 b3       	in	r25, 0x12	; 18
 4e0:	89 2f       	mov	r24, r25
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_ReadPin+0x62>
 4e6:	95 95       	asr	r25
 4e8:	87 95       	ror	r24
 4ea:	2a 95       	dec	r18
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_ReadPin+0x5e>
 4ee:	81 70       	andi	r24, 0x01	; 1
 4f0:	08 95       	ret
	}
}
 4f2:	08 95       	ret

000004f4 <DIO_WritePORT>:

extern void DIO_WritePORT( Dio_Port_type port,  u8 value)
{
	switch(port)
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	41 f0       	breq	.+16     	; 0x508 <DIO_WritePORT+0x14>
 4f8:	28 f0       	brcs	.+10     	; 0x504 <DIO_WritePORT+0x10>
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	39 f0       	breq	.+14     	; 0x50c <DIO_WritePORT+0x18>
 4fe:	83 30       	cpi	r24, 0x03	; 3
 500:	39 f0       	breq	.+14     	; 0x510 <DIO_WritePORT+0x1c>
 502:	08 95       	ret
	{
		case PA:
		PORTA = value;
 504:	6b bb       	out	0x1b, r22	; 27
		break;
 506:	08 95       	ret
		case PB:
		PORTB = value;
 508:	68 bb       	out	0x18, r22	; 24
		break;
 50a:	08 95       	ret
		case PC:
		PORTC = value;
 50c:	65 bb       	out	0x15, r22	; 21
		break;
 50e:	08 95       	ret
		case PD:
		PORTD = value;
 510:	62 bb       	out	0x12, r22	; 18
 512:	08 95       	ret

00000514 <DIO_ReadPORT>:
	}
}

extern u8 DIO_ReadPORT( Dio_Port_type port)
{
	switch(port)
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	41 f0       	breq	.+16     	; 0x528 <DIO_ReadPORT+0x14>
 518:	28 f0       	brcs	.+10     	; 0x524 <DIO_ReadPORT+0x10>
 51a:	82 30       	cpi	r24, 0x02	; 2
 51c:	39 f0       	breq	.+14     	; 0x52c <DIO_ReadPORT+0x18>
 51e:	83 30       	cpi	r24, 0x03	; 3
 520:	39 f0       	breq	.+14     	; 0x530 <DIO_ReadPORT+0x1c>
 522:	08 c0       	rjmp	.+16     	; 0x534 <DIO_ReadPORT+0x20>
	{
		case PA:
		return PORTA;
 524:	8b b3       	in	r24, 0x1b	; 27
 526:	08 95       	ret
	
		case PB:
		return PORTB;
 528:	88 b3       	in	r24, 0x18	; 24
 52a:	08 95       	ret
		
		case PC:
		return PORTC;
 52c:	85 b3       	in	r24, 0x15	; 21
 52e:	08 95       	ret
		
		case PD:
		return PORTD;
 530:	82 b3       	in	r24, 0x12	; 18
 532:	08 95       	ret
	}
 534:	08 95       	ret

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
